# -*- coding: utf-8 -*-
"""streamlitt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z99SO7VhKpN0IdaAJ5FL2J7m44PDkFc5
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from azure.storage.blob import BlobServiceClient
from io import BytesIO

# Azure Blob Storage config
ACCOUNT_URL = "https://iesstsabdbaa.blob.core.windows.net/"
CONTAINER_NAME = "group7"
RIDE_PATH = "optimized_ride_data"
DRIVER_PATH = "optimized_driver_data"
ACCESS_KEY = "yfqMW8gf8u+M5pOW33Q5gtRTFBJQXStVK4K2rlCVVzxlrRG21Sh7MVj06uExoL86Npb7HWWgxYUe+ASthUr6/g=="

# Connect to Azure Blob Storage
blob_service_client = BlobServiceClient(account_url=ACCOUNT_URL, credential=ACCESS_KEY)

def load_parquet_from_blob(path_prefix):
    container_client = blob_service_client.get_container_client(CONTAINER_NAME)
    blob_list = container_client.list_blobs(name_starts_with=path_prefix)
    dataframes = []
    for blob in blob_list:
        blob_client = container_client.get_blob_client(blob.name)
        stream = BytesIO(blob_client.download_blob().readall())
        try:
            df = pd.read_parquet(stream)
            dataframes.append(df)
        except Exception:
            continue
    if dataframes:
        return pd.concat(dataframes, ignore_index=True)
    return pd.DataFrame()

# Streamlit setup
st.set_page_config(page_title="Ride & Driver Dashboard", layout="wide")
st.title("Ride & Driver Dashboard")

# Load data
ride_df = load_parquet_from_blob(RIDE_PATH)
driver_df = load_parquet_from_blob(DRIVER_PATH)

# Drop all rows with missing values
ride_df.dropna(inplace=True)
driver_df.dropna(inplace=True)

# Preprocessing
if "datetime" in ride_df.columns:
    ride_df["datetime"] = pd.to_datetime(ride_df["datetime"])
if "pickup_time" in ride_df.columns and "dropoff_time" in ride_df.columns:
    ride_df["pickup_time"] = pd.to_datetime(ride_df["pickup_time"])
    ride_df["dropoff_time"] = pd.to_datetime(ride_df["dropoff_time"])
    ride_df["ride_duration_min"] = (ride_df["dropoff_time"] - ride_df["pickup_time"]).dt.total_seconds() / 60

# ========== BASIC ANALYTICS ==========
if not ride_df.empty:
    st.header("Basic Analytics")

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Rides", len(ride_df))
    col2.metric("Completed Rides", len(ride_df[ride_df["status"] == "completed"]))
    col3.metric("Active Drivers", len(driver_df[driver_df["status"] == "active"]))

    st.subheader("Ride Status Distribution")
    status_data = ride_df["status"].value_counts().reset_index()
    status_data.columns = ["status", "count"]
    status_fig = px.pie(status_data, names="status", values="count", title="Ride Status Distribution")
    st.plotly_chart(status_fig, use_container_width=True)

    st.subheader("Ride Duration Distribution (mins)")
    if "ride_duration_min" in ride_df.columns:
        dur_fig = px.histogram(ride_df, x="ride_duration_min", nbins=30, title="Ride Duration (min)")
        st.plotly_chart(dur_fig, use_container_width=True)

    st.subheader("Rides Over Time")
    rides_time = ride_df.set_index("datetime").resample("H").size().rename("ride_count").reset_index()
    time_fig = px.line(rides_time, x="datetime", y="ride_count", title="Hourly Ride Volume")
    st.plotly_chart(time_fig, use_container_width=True)

# ========== INTERMEDIATE ANALYTICS ==========
    st.header("Intermediate Analytics")

    cancellation_rate = len(ride_df[ride_df["status"] == "cancelled"]) / len(ride_df) * 100
    st.metric("Cancellation Rate", f"{cancellation_rate:.2f}%")

    demand = ride_df.set_index("datetime").resample("H").size().rename("ride_requests")
    demand_supply = demand.reset_index()
    demand_supply["active_drivers"] = len(driver_df[driver_df["status"] == "active"])  # Simplified

    fig_demand_supply = px.line(demand_supply, x="datetime", y=["ride_requests", "active_drivers"],
                                 title="Demand vs. Supply (Hourly)",
                                 labels={"value": "Count", "variable": "Metric"})
    st.plotly_chart(fig_demand_supply, use_container_width=True)

# ========== ADVANCED PLACEHOLDER ==========
    st.header("Advanced Analytics (Planned)")
    st.info("Coming soon: anomaly detection, surge pricing zones, fraud detection.")

# ========== DRIVER ANALYTICS ==========
if not driver_df.empty:
    st.header("Driver Analytics")

    st.subheader("Driver Status")
    driver_status_data = driver_df["status"].value_counts().reset_index()
    driver_status_data.columns = ["status", "count"]
    driver_status_fig = px.pie(driver_status_data, names="status", values="count", title="Driver Status")
    st.plotly_chart(driver_status_fig, use_container_width=True)

    st.subheader("Vehicle Type Distribution")
    vehicle_data = driver_df["vehicle_type"].value_counts().reset_index()
    vehicle_data.columns = ["vehicle_type", "count"]
    vehicle_fig = px.bar(vehicle_data, x="vehicle_type", y="count", title="Vehicle Type Count")
    st.plotly_chart(vehicle_fig, use_container_width=True)
