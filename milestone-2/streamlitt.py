# -*- coding: utf-8 -*-
"""streamlitt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z99SO7VhKpN0IdaAJ5FL2J7m44PDkFc5
"""

import streamlit as st
import pandas as pd
from azure.storage.blob import BlobServiceClient
from io import BytesIO
import pyarrow.parquet as pq

# Azure Blob Storage config
ACCOUNT_URL = "https://iesstsabdbaa.blob.core.windows.net/"
CONTAINER_NAME = "group7"
RIDE_PATH = "optimized_ride_data"
DRIVER_PATH = "optimized_driver_data"
ACCESS_KEY = "yfqMW8gf8u+M5pOW33Q5gtRTFBJQXStVK4K2rlCVVzxlrRG21Sh7MVj06uExoL86Npb7HWWgxYUe+ASthUr6/g=="

# Connect to Azure Blob Storage
blob_service_client = BlobServiceClient(account_url=ACCOUNT_URL, credential=ACCESS_KEY)

def load_parquet_from_blob(path_prefix):
    container_client = blob_service_client.get_container_client(CONTAINER_NAME)
    blob_list = container_client.list_blobs(name_starts_with=path_prefix)

    dataframes = []
    for blob in blob_list:
        blob_client = container_client.get_blob_client(blob.name)
        stream = BytesIO(blob_client.download_blob().readall())
        try:
            df = pd.read_parquet(stream)
            dataframes.append(df)
        except Exception:
            continue

    if dataframes:
        return pd.concat(dataframes, ignore_index=True)
    return pd.DataFrame()

st.set_page_config(page_title="Real-Time Ride & Driver Dashboard", layout="wide")
st.title("\U0001F6A6 Real-Time Ride & Driver Dashboard")

# Load latest data from Azure Blob Storage
ride_df = load_parquet_from_blob(RIDE_PATH)
driver_df = load_parquet_from_blob(DRIVER_PATH)

# Show basic ride analytics
if not ride_df.empty:
    st.subheader("\U0001F4CA Ride Requests Analytics")

    total_rides = len(ride_df)
    active_rides = len(ride_df[ride_df["status"] == "Ongoing"])
    completed_rides = len(ride_df[ride_df["status"] == "Completed"])
    cancellation_rate = len(ride_df[ride_df["status"] == "Cancelled"]) / total_rides if total_rides > 0 else 0

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Rides", total_rides)
    col2.metric("Active Rides", active_rides)
    col3.metric("Completed Rides", completed_rides)
    col4.metric("Cancellation Rate", f"{cancellation_rate:.2%}")

    st.write("### Ride Demand by Type")
    st.bar_chart(ride_df["ride_type"].value_counts())

    st.write("### Ride Demand Levels")
    st.bar_chart(ride_df["demand_level"].value_counts())

    st.write("### Distance Anomalies (3Ïƒ rule)")
    mean_dist = ride_df["estimated_distance_km"].mean()
    std_dist = ride_df["estimated_distance_km"].std()
    if std_dist is not None:
        anomalies = ride_df[(ride_df["estimated_distance_km"] > mean_dist + 3 * std_dist) |
                            (ride_df["estimated_distance_km"] < mean_dist - 3 * std_dist)]
        st.dataframe(anomalies[["request_id", "estimated_distance_km", "ride_type"]])

    st.write("### Fraud Detection")
    fraud = ride_df[(ride_df["estimated_distance_km"] < 1.0) & (ride_df["estimate_price"] > 100)]
    st.dataframe(fraud[["request_id", "estimated_distance_km", "estimate_price"]])

    st.write("### Top 5 Pickup Hotspots")
    ride_df["pickup_zone_lat"] = ride_df["pickup_lat"].round(1)
    ride_df["pickup_zone_lng"] = ride_df["pickup_lng"].round(1)
    hotspots = ride_df.groupby(["pickup_zone_lat", "pickup_zone_lng"]).size().reset_index(name="count")
    hotspots = hotspots.sort_values(by="count", ascending=False).head(5)
    st.dataframe(hotspots)

# Driver analytics
if not driver_df.empty:
    st.subheader("\U0001F697 Driver Status")
    col1, col2 = st.columns(2)
    col1.metric("Total Drivers", len(driver_df))
    col2.bar_chart(driver_df["vehicle_type"].value_counts())

# Demand vs Supply
if not ride_df.empty and not driver_df.empty:
    st.subheader("\U0001F517 Demand vs Supply")
    demand = ride_df["ride_type"].value_counts().rename_axis("type").reset_index(name="total_requests")
    supply = driver_df["vehicle_type"].value_counts().rename_axis("type").reset_index(name="available_drivers")
    match_df = pd.merge(demand, supply, on="type", how="outer").fillna(0)
    match_df["demand_supply_ratio"] = match_df["total_requests"] / (match_df["available_drivers"] + 1)
    st.dataframe(match_df)

# Show raw data
with st.expander("\U0001F50D Sample Ride Data"):
    st.dataframe(ride_df.head(10))

with st.expander("\U0001F50D Sample Driver Data"):
    st.dataframe(driver_df.head(10))